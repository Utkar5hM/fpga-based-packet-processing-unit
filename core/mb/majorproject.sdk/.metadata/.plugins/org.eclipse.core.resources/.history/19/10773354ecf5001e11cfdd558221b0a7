#include "xparameters.h"
#include <xil_printf.h>
#include <stdio.h>
#include "xil_exception.h"
#include "xuartlite.h"
#include "xintc.h"
#include "xenv.h"

#define UARTLITE_DEVICE_ID XPAR_UARTLITE_0_DEVICE_ID
#define INTC_DEVICE_ID XPAR_INTC_0_DEVICE_ID
#define UARTLITE_INT_IRQ_ID XPAR_INTC_0_UARTLITE_0_VEC_ID
#define GPIO_REG_BASEADDR 0x40000000
/*
* The following constant controls the length of the buffers to be sent
* and received with the UartLite device.
*/
#define TEST_BUFFER_SIZE 2000
/************************** Function Prototypes ******************************/
int SetupUartLite(u16 DeviceId);
int SetupInterruptSystem(XUartLite *UartLitePtr);
void SendHandler(void *CallBackRef, unsigned int EventData);
void RecvHandler(void *CallBackRef, unsigned int EventData);
void resetBuffer();
void printBuffer();
/************************** Variable Definitions *****************************/
XUartLite UartLite; /* The instance of the UartLite Device */
XUartLite_Config *UartLite_Cfg; /* The instance of the UartLite Config */
XIntc InterruptController; /* The instance of the Interrupt Controller */
/*
* The following buffers are used in this example to send and receive data
* with the UartLite.
*/
u8 SendBuffer[TEST_BUFFER_SIZE];
u8 ReceiveBuffer[TEST_BUFFER_SIZE];
/* Here are the pointers to the buffer */
u8* ReceiveBufferPtr = &ReceiveBuffer[0];
/*
* The following counters are used to determine when the entire buffer has
* been sent and received.
*/
static volatile int TotalReceivedCount;
static volatile int TotalSentCount;
int main()
{
//Variable definitions
int Status=0;
//Set up the UART and configure the interrupt handler for bytes in RX buffer
Status = SetupUartLite(UARTLITE_DEVICE_ID);
//Get a reference pointer to the Uart Configuration
UartLite_Cfg = XUartLite_LookupConfig(UARTLITE_DEVICE_ID);
//Print out the info about our XUartLite instance
xil_printf("\n\r");
xil_printf("Serial Port Properties ------------------\n\r");
xil_printf("Device ID : %d\n\r", UartLite_Cfg->DeviceId);
xil_printf("Baud Rate : %d\n\r", UartLite_Cfg->BaudRate);
xil_printf("Data Bits : %d\n\r", UartLite_Cfg->DataBits);
xil_printf("Base Addr : %08X\n\r", UartLite_Cfg->RegBaseAddr);
xil_printf("\n\r");
// Run
while (1){};
//End of program
return Status;
}

int SetupUartLite(u16 DeviceId)
{
int Status;
/*
* Initialize the UartLite driver so that it's ready to use.
*/
Status = XUartLite_Initialize(&UartLite, DeviceId);
if (Status != XST_SUCCESS) {
return XST_FAILURE;
}
/*
* Perform a self-test to ensure that the hardware was built correctly.
*/
Status = XUartLite_SelfTest(&UartLite);
if (Status != XST_SUCCESS) {
return XST_FAILURE;
}
/*
* Connect the UartLite to the interrupt subsystem such that interrupts can
* occur. This function is application specific.
*/
Status = SetupInterruptSystem(&UartLite);
if (Status != XST_SUCCESS) {
return XST_FAILURE;
}

XUartLite_SetSendHandler(&UartLite, SendHandler, &UartLite);
XUartLite_SetRecvHandler(&UartLite, RecvHandler, &UartLite);

XUartLite_EnableInterrupt(&UartLite);
// XUartLite_Recv(&UartLite, ReceiveBufferPtr, 1);
return XST_SUCCESS;
}

void SendHandler(void *CallBackRef, unsigned int EventData)
{
TotalSentCount = EventData;
}

void RecvHandler(void *CallBackRef, unsigned int EventData){
	XUartLite_Recv(&UartLite, ReceiveBuffer, 1); // Get ready to receive 1st byte
	length++;
	u64 length = 0;
	// see that buffer starts with \xFF\xFF
	if(ReceiveBuffer[0] == 0xFF) //Look at the start of the message to determine the remaining bytes.
		{
		for(int i=1;i<TEST_BUFFER_SIZE;i\+\+){
			ReceiveBuffer[i]=XUartLite_RecvByte(0x40600000U);
			length++;
			if(ReceiveBuffer[i] != '\0'){
				break;
				}
			}
		}
	printBuffer(); // print the contents of the buffer.
	XUartLite_ResetFifos(&UartLite); // Reset the FIFOs
	resetBuffer(); // Reset the contents of the buffer.
	}
	void resetBuffer()
	{
	for(int i=0;i<TEST_BUFFER_SIZE;i++){
	ReceiveBuffer[i]=0;
	}
}

void printBuffer(u64 length){
	//return the message
	XUartLite_Send(&UartLite,&ReceiveBuffer[0],length);
}

int SetupInterruptSystem(XUartLite *UartLitePtr)
{
int Status;
/*
* Initialize the interrupt controller driver so that it is ready to
* use.
*/
Status = XIntc_Initialize(&InterruptController, INTC_DEVICE_ID);
if (Status != XST_SUCCESS) {
return XST_FAILURE;
}
/*
* Connect a device driver handler that will be called when an interrupt
* for the device occurs, the device driver handler performs the
* specific interrupt processing for the device.
*/
Status = XIntc_Connect(&InterruptController, UARTLITE_INT_IRQ_ID,
(XInterruptHandler)XUartLite_InterruptHandler,
(void *)UartLitePtr);
if (Status != XST_SUCCESS) {
return XST_FAILURE;
}
/*
* Start the interrupt controller such that interrupts are enabled for
* all devices that cause interrupts, specific real mode so that
* the UartLite can cause interrupts through the interrupt controller.
*/
Status = XIntc_Start(&InterruptController, XIN_REAL_MODE);
if (Status != XST_SUCCESS) {
return XST_FAILURE;
}
/*
* Enable the interrupt for the UartLite device.
*/
XIntc_Enable(&InterruptController, UARTLITE_INT_IRQ_ID);
/*
* Initialize the exception table.
*/
Xil_ExceptionInit();
/*
* Register the interrupt controller handler with the exception table.
*/
Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
(Xil_ExceptionHandler)XIntc_InterruptHandler,
&InterruptController);
/*
* Enable exceptions.
*/
Xil_ExceptionEnable();
return XST_SUCCESS;
}
